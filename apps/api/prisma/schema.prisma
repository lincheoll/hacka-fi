generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model UserProfile {
  walletAddress String @id @map("wallet_address")
  username      String? @unique
  bio           String?
  avatarUrl     String? @map("avatar_url")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  createdHackathons Hackathon[] @relation("HackathonCreator")
  participations    Participant[]
  votes            Vote[]
  achievements     UserAchievement[]
  auditLogs        AuditLog[]

  @@map("user_profiles")
}

model Hackathon {
  id                    String   @id @default(cuid())
  title                String
  description          String
  organizerAddress     String   @map("organizer_address")
  registrationDeadline DateTime @map("registration_deadline")
  submissionDeadline   DateTime @map("submission_deadline")
  votingDeadline       DateTime @map("voting_deadline")
  status               HackathonStatus @default(DRAFT)
  prizeAmount          String?  @map("prize_amount") // Using String for BigInt compatibility
  entryFee             String?  @map("entry_fee") // Using String for BigInt compatibility
  maxParticipants      Int?     @map("max_participants")
  coverImageUrl        String?  @map("cover_image_url")
  contractAddress      String?  @map("contract_address")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  organizer      UserProfile     @relation("HackathonCreator", fields: [organizerAddress], references: [walletAddress])
  participants   Participant[]
  votes          Vote[]
  results        Result[]
  achievements   UserAchievement[]
  auditLogs      AuditLog[]

  @@map("hackathons")
}

model Participant {
  id             Int      @id @default(autoincrement())
  hackathonId    String   @map("hackathon_id")
  walletAddress  String   @map("wallet_address")
  submissionUrl  String?  @map("submission_url")
  entryFee       String?  @map("entry_fee") // Using String for BigInt compatibility
  rank           Int?
  prizeAmount    String?  @map("prize_amount") // Using String for BigInt compatibility
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  hackathon Hackathon   @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  user      UserProfile @relation(fields: [walletAddress], references: [walletAddress])
  votes     Vote[]

  @@unique([hackathonId, walletAddress])
  @@map("participants")
}

model Vote {
  id            Int      @id @default(autoincrement())
  hackathonId   String   @map("hackathon_id")
  judgeAddress  String   @map("judge_address")
  participantId Int      @map("participant_id")
  score         Int
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  hackathon   Hackathon   @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  judge       UserProfile @relation(fields: [judgeAddress], references: [walletAddress])
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([hackathonId, judgeAddress, participantId])
  @@map("votes")
}

model Result {
  id                  Int      @id @default(autoincrement())
  hackathonId         String   @unique @map("hackathon_id")
  winners             String   // JSON string of winner data
  totalPrizePool      String   @map("total_prize_pool") // Using String for BigInt compatibility
  distributionTxHash  String?  @map("distribution_tx_hash")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  hackathon Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)

  @@map("results")
}

model UserAchievement {
  id           Int                 @id @default(autoincrement())
  userAddress  String              @map("user_address")
  achievementType AchievementType  @map("achievement_type")
  hackathonId  String?             @map("hackathon_id")
  rank         Int?
  prizeAmount  String?             @map("prize_amount") // Using String for BigInt compatibility
  earnedAt     DateTime            @default(now()) @map("earned_at")

  user      UserProfile @relation(fields: [userAddress], references: [walletAddress])
  hackathon Hackathon?  @relation(fields: [hackathonId], references: [id])

  @@map("user_achievements")
}

model AuditLog {
  id            String         @id @default(cuid())
  hackathonId   String         @map("hackathon_id")
  action        AuditAction
  fromStatus    HackathonStatus? @map("from_status")
  toStatus      HackathonStatus  @map("to_status")
  reason        String
  triggeredBy   TriggerType    @map("triggered_by")
  userAddress   String?        @map("user_address")
  metadata      String?        // JSON string for additional data
  ipAddress     String?        @map("ip_address")
  userAgent     String?        @map("user_agent")
  createdAt     DateTime       @default(now()) @map("created_at")

  hackathon Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  user      UserProfile? @relation(fields: [userAddress], references: [walletAddress])

  @@map("audit_logs")
}

enum AuditAction {
  STATUS_CHANGE
  MANUAL_OVERRIDE
  AUTOMATIC_TRANSITION
}

enum TriggerType {
  SYSTEM
  ORGANIZER
  ADMIN
}

enum HackathonStatus {
  DRAFT
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  SUBMISSION_OPEN
  SUBMISSION_CLOSED
  VOTING_OPEN
  VOTING_CLOSED
  COMPLETED
}

enum AchievementType {
  WINNER
  RUNNER_UP
  PARTICIPANT
  JUDGE
  CREATOR
}
